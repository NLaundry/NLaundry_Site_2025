---
import { getShortDescription, generateSourceUrl } from "../lib/utils";
import type { ProjectFrontmatter } from "../lib/types";
import type { MarkdownLayoutProps } from "astro";
import Prose from "../components/Prose.astro";
import Layout from "./Layout.astro";
import Section from "../components/common/Section.astro";
import Anchor from "../components/common/Anchor.astro";
import YouTubeEmbed from "../components/common/YouTubeEmbed.astro";
import StructuredData from "../components/common/StructuredData.astro";
import { GLOBAL } from "../lib/variables";


type Props = MarkdownLayoutProps<ProjectFrontmatter>;

const { frontmatter } = Astro.props;
const shortDescription = getShortDescription(frontmatter.description);
const sourceUrl = generateSourceUrl(frontmatter.filename, "lab");

// Structured data for projects
const structuredData = {
  "@context": "https://schema.org",
  "@type": "TechArticle",
  "headline": frontmatter.title,
  "description": frontmatter.description,
  "author": {
    "@type": "Person",
    "name": GLOBAL.username,
    "url": GLOBAL.rootUrl
  },
  "publisher": {
    "@type": "Person",
    "name": GLOBAL.username,
    "url": GLOBAL.rootUrl
  },
  "datePublished": frontmatter.timestamp,
  "dateModified": frontmatter.timestamp,
  "url": sourceUrl,
  "keywords": frontmatter.tags?.join(", "),
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": sourceUrl
  },
  ...(frontmatter.githubUrl && {
    "codeRepository": frontmatter.githubUrl
  }),
  ...(frontmatter.githubRepos && {
    "codeRepository": frontmatter.githubRepos.map(repo => repo.url)
  })
};
---

<Layout>
  <Fragment slot="head">
    <title>{frontmatter.title} • {GLOBAL.username}</title>
    <meta name="description" content={frontmatter.description} />
    <meta name="keywords" content={frontmatter.tags?.join(", ")} />
    <meta name="author" content={GLOBAL.username} />
    <meta name="robots" content="index, follow" />
    
    <!-- Open Graph -->
    <meta property="og:type" content="article" />
    <meta property="og:title" content={`${frontmatter.title} • ${GLOBAL.username}`} />
    <meta property="og:description" content={shortDescription} />
    <meta property="og:image" content={`${GLOBAL.rootUrl}/${GLOBAL.profileImage}`} />
    <meta property="og:url" content={sourceUrl} />
    <meta property="og:site_name" content={GLOBAL.username} />
    <meta property="article:author" content={GLOBAL.username} />
    <meta property="article:published_time" content={frontmatter.timestamp} />
    <meta property="article:tag" content={frontmatter.tags?.join(", ")} />
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={`${frontmatter.title} • ${GLOBAL.username}`} />
    <meta name="twitter:description" content={shortDescription} />
    <meta name="twitter:image" content={`${GLOBAL.rootUrl}/${GLOBAL.profileImage}`} />
    <meta name="twitter:creator" content="@nathanlaundry" />
    
    <!-- Language and SEO -->
    <meta http-equiv="content-language" content="en" />
    <meta name="language" content="English" />
    <link rel="canonical" href={sourceUrl} />
    
    <!-- Structured Data -->
    <StructuredData type="Article" data={structuredData} />
  </Fragment>
  <Section variant="blog" class="mt-8">
    <div class="flex flex-col gap-6 mt-8 mb-16">
      <h1 class="text-4xl sm:text-5xl xl:text-6xl leading-tight font-display font-bold text-base-content">
        {frontmatter.title}
      </h1>
      <div class="flex flex-wrap gap-2">
        {
          frontmatter.tags
            ? frontmatter.tags.map((tag) => (
                <span class="inline-flex items-center px-3 py-1.5 rounded-full text-sm font-medium bg-primary/10 text-primary border border-primary/20 hover:bg-primary/20 transition-colors">
                  {tag}
                </span>
              ))
            : null
        }
      </div>
      <div class="flex flex-wrap gap-3 border-t border-base-300 pt-4">
        {
          frontmatter.githubUrl ? (
            <Anchor url={frontmatter.githubUrl} class="inline-flex items-center gap-2 px-4 py-2 bg-base-200 hover:bg-base-300 rounded-lg text-base-content font-medium transition-colors" external>
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33s1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2"></path>
              </svg>
              GitHub
            </Anchor>
          ) : null
        }
        {
          frontmatter.githubRepos ? (
            frontmatter.githubRepos.map((repo) => (
              <Anchor url={repo.url} class="inline-flex items-center gap-2 px-4 py-2 bg-base-200 hover:bg-base-300 rounded-lg text-base-content font-medium transition-colors" external>
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33s1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2"></path>
                </svg>
                {repo.name}
              </Anchor>
            ))
          ) : null
        }
        {
          frontmatter.liveUrl ? (
            <Anchor url={frontmatter.liveUrl} class="inline-flex items-center gap-2 px-4 py-2 bg-primary hover:bg-primary/90 text-primary-content rounded-lg font-medium transition-colors" external>
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
              </svg>
              Live Demo
            </Anchor>
          ) : null
        }
      </div>
    </div>
    
    {frontmatter.youtubeUrl && (
      <div class="mb-12">
        <YouTubeEmbed url={frontmatter.youtubeUrl} title={frontmatter.title} />
      </div>
    )}
    
    <Prose>
      <slot />
    </Prose>
    <div class="border-t border-base-300 pt-8 mt-16">
      <p class="text-base-content/70 font-medium">~{GLOBAL.username}</p>
    </div>
  </Section>
</Layout>
